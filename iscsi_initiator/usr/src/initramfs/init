#!/bin/busybox sh

rescue_shell() {
        echo "Something went wrong. Dropping to shell."
        exec sh
}

kernel_cmdline() {
        local value
        value=" $(cat /proc/cmdline) "
        value="${value##* $1=}"
        value="${value%% *}"
        [ "$value" != "" ] && echo "$value"
}

get_name_for_mac() {
        local MAC=$(echo "$1" | tr '[:upper:]' '[:lower:]')

        ifconfig -a | grep 'HWaddr' | while read I; do
                local TEMP_MAC="${I##* }"
                if [ -n "$TEMP_MAC" ] && [ "$TEMP_MAC" == "$MAC" ]; then
                        echo "${I%% *}"
                        return
                fi
        done
}

mount -t proc proc /proc
mount -t sysfs sysfs /sys

NIC_PRIMARY=$(kernel_cmdline 'nfsroot_primary_nic')
MAC_PRIMARY=$(kernel_cmdline 'nfsroot_primary_mac')
if [ -z "$NIC_PRIMARY" ]; then
        if [ -n "$MAC_PRIMARY" ]; then
                NIC_PRIMARY=$(get_name_for_mac "$MAC_PRIMARY")
        fi
        if [ -z "$NIC_PRIMARY" ]; then
                NIC_PRIMARY="eth0"
        fi
fi

echo "Using NIC $NIC_PRIMARY as primary network device."

ip link set name primary $NIC_PRIMARY
brctl addbr lan
brctl addif lan primary
ip link set dev primary up
ip link set dev lan up

NFS=$(kernel_cmdline 'nfsroot')
NFS_DEFAULT_OPTS="nolock,noacl,rw,hard,intr,vers=3,rsize=65535,wsize=65535"
if [ -z "$NFS" ]; then
        echo "Please specify a nfsroot= variable to the kernel cmdline (without the options)."
        echo "The default mount options are $NFS_DEFAULT_OPTS."
        rescue_shell
fi

NFS_ROOT="${NFS%%,*}"
NFS_OPTS="${NFS#*,}"
if [ "$NFS_OPTS" == "$NFS" ]; then
        NFS_OPTS="$NFS_DEFAULT_OPTS"
fi

udhcpc -i lan || rescue_shell

mount -t nfs -o "$NFS_OPTS" "$NFS_ROOT" /mnt/root || rescue_shell

umount /proc
umount /sys

exec switch_root /mnt/root /sbin/init || rescue_shell
